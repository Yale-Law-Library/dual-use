{"ast":null,"code":"var _jsxFileName = \"/Users/parkerkaufmann/Code/ylj/src/LineChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { select } from 'd3-selection';\nimport { scalePoint, scaleLinear, scaleOrdinal } from 'd3-scale';\nimport { max } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { line, area } from 'd3-shape';\nimport styled from 'styled-components';\nimport data from './mosul_targets_by_quarter.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartContainer = styled.div`\n  width: 100%;\n  height: 600px;\n  font-family: 'Georgia', serif;\n  color: #333;\n`;\n_c = ChartContainer;\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  font-size: 14px;\n`;\n_c2 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n\n  &::before {\n    content: '';\n    display: inline-block;\n    width: 20px;\n    height: 2px;\n    margin-right: 6px;\n    background-color: ${props => props.color || '#000'};\n  }\n`;\n_c3 = LegendItem;\nexport default function LineChart() {\n  _s();\n  const svgRef = useRef();\n  const sortedCategories = Array.from(new Set(data.flatMap(d => d.categories.map(c => c.name)))).sort((a, b) => {\n    const totalA = data.reduce((sum, d) => {\n      const item = d.categories.find(c => c.name === a);\n      return sum + (item ? item.count : 0);\n    }, 0);\n    const totalB = data.reduce((sum, d) => {\n      const item = d.categories.find(c => c.name === b);\n      return sum + (item ? item.count : 0);\n    }, 0);\n    return totalB - totalA; // smallest totals last = drawn on top\n  });\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    svg.selectAll('*').remove();\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 60,\n      left: 60\n    };\n    const width = 900 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n    const g = svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const defs = svg.append('defs');\n    const quarters = data.map(d => d.quarter);\n    const categories = [...sortedCategories];\n    const colorMap = {\n      \"Military Personnel, Equipment & Facilities\": \"#DFC5B2\",\n      \"Vehicles\": \"#B7BCD6\",\n      \"Transportation Infrastructure\": \"#ACBCC5\",\n      \"Residential Buildings\": \"#5088A1\",\n      \"Manufacturing, Production, and Construction\": \"#998C84\",\n      \"Oil Infrastructure\": \"#D2D9B6\",\n      \"Media and Telecom Facilities\": \"#9194A8\",\n      \"Terrain\": \"#AEAC8D\",\n      \"Water Infrastructure\": \"#8EBADB\",\n      \"Electrical Infrastructure\": \"#78A898\",\n      \"Financial and Banking Facilities\": \"#98D5D3\"\n    };\n    const xScale = scalePoint().domain(quarters).range([0, width]);\n    const yMax = max(data, d => {\n      return max(d.categories, c => c.count);\n    });\n    const yScale = scaleLinear().domain([0, yMax]).range([height, 0]);\n    g.append('g').call(axisLeft(yScale));\n    g.append('g').attr('transform', `translate(0,${height})`).call(axisBottom(xScale)).selectAll('text').style('text-anchor', 'middle').attr('dy', null).text(d => {\n      const [q, y] = d.split(\" \");\n      return `${q}\\n${y}`;\n    });\n    categories.forEach((category, idx) => {\n      const lineData = data.map(d => {\n        const entry = d.categories.find(c => c.name === category);\n        return {\n          quarter: d.quarter,\n          count: entry ? entry.count : 0\n        };\n      });\n      const id = `grad-${idx}`;\n      const color = colorMap[category] || '#ccc';\n      const gradient = defs.append('linearGradient').attr('id', id).attr('x1', '0%').attr('y1', '0%').attr('x2', '0%').attr('y2', '100%');\n      gradient.append('stop').attr('offset', '0%').attr('stop-color', color).attr('stop-opacity', 0.6);\n      gradient.append('stop').attr('offset', '100%').attr('stop-color', '#ffffff').attr('stop-opacity', 0.8);\n      const areaPath = area().x(d => xScale(d.quarter)).y0(height).y1(d => yScale(d.count));\n      g.append('path').datum(lineData).attr('fill', `url(#${id})`).attr('fill-opacity', .7).attr('stroke', 'none').attr('d', areaPath);\n      const linePath = line().x(d => xScale(d.quarter)).y(d => yScale(d.count));\n      g.append('path').datum(lineData).attr('fill', 'none').attr('stroke', color).attr('stroke-width', 1.5).attr('d', linePath);\n    });\n  }, []);\n  const categories = [...sortedCategories];\n  const colorMap = {\n    \"Military Personnel, Equipment & Facilities\": \"#DFC5B2\",\n    \"Vehicles\": \"#B7BCD6\",\n    \"Transportation Infrastructure\": \"#ACBCC5\",\n    \"Residential Buildings\": \"#5088A1\",\n    \"Manufacturing, Production, and Construction\": \"#998C84\",\n    \"Oil Infrastructure\": \"#D2D9B6\",\n    \"Media and Telecom Facilities\": \"#9194A8\",\n    \"Terrain\": \"#AEAC8D\",\n    \"Water Infrastructure\": \"#8EBADB\",\n    \"Electrical Infrastructure\": \"#78A898\",\n    \"Financial and Banking Facilities\": \"#98D5D3\"\n  };\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Legend, {\n      children: categories.map(name => /*#__PURE__*/_jsxDEV(LegendItem, {\n        color: colorMap[name] || '#ccc',\n        children: name\n      }, name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c4 = LineChart;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ChartContainer\");\n$RefreshReg$(_c2, \"Legend\");\n$RefreshReg$(_c3, \"LegendItem\");\n$RefreshReg$(_c4, \"LineChart\");","map":{"version":3,"names":["React","useEffect","useRef","select","scalePoint","scaleLinear","scaleOrdinal","max","axisLeft","axisBottom","line","area","styled","data","jsxDEV","_jsxDEV","ChartContainer","div","_c","Legend","_c2","LegendItem","props","color","_c3","LineChart","_s","svgRef","sortedCategories","Array","from","Set","flatMap","d","categories","map","c","name","sort","a","b","totalA","reduce","sum","item","find","count","totalB","svg","current","selectAll","remove","margin","top","right","bottom","left","width","height","g","attr","append","defs","quarters","quarter","colorMap","xScale","domain","range","yMax","yScale","call","style","text","q","y","split","forEach","category","idx","lineData","entry","id","gradient","areaPath","x","y0","y1","datum","linePath","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c4","$RefreshReg$"],"sources":["/Users/parkerkaufmann/Code/ylj/src/LineChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { select } from 'd3-selection';\nimport { scalePoint, scaleLinear, scaleOrdinal } from 'd3-scale';\nimport { max } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { line, area } from 'd3-shape';\nimport styled from 'styled-components';\nimport data from './mosul_targets_by_quarter.json';\n\nconst ChartContainer = styled.div`\n  width: 100%;\n  height: 600px;\n  font-family: 'Georgia', serif;\n  color: #333;\n`;\n\nconst Legend = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  font-size: 14px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n\n  &::before {\n    content: '';\n    display: inline-block;\n    width: 20px;\n    height: 2px;\n    margin-right: 6px;\n    background-color: ${(props) => props.color || '#000'};\n  }\n`;\n\nexport default function LineChart() {\n  const svgRef = useRef();\n  const sortedCategories = Array.from(\n    new Set(data.flatMap(d => d.categories.map(c => c.name)))\n  ).sort((a, b) => {\n    const totalA = data.reduce((sum, d) => {\n      const item = d.categories.find(c => c.name === a);\n      return sum + (item ? item.count : 0);\n    }, 0);\n    const totalB = data.reduce((sum, d) => {\n      const item = d.categories.find(c => c.name === b);\n      return sum + (item ? item.count : 0);\n    }, 0);\n    return totalB - totalA; // smallest totals last = drawn on top\n  });\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    svg.selectAll('*').remove();\n\n    const margin = { top: 20, right: 20, bottom: 60, left: 60 };\n    const width = 900 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n\n    const g = svg\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    const defs = svg.append('defs');\n\n    const quarters = data.map((d) => d.quarter);\n    const categories = [...sortedCategories];\n\n\n    const colorMap = {\n      \"Military Personnel, Equipment & Facilities\": \"#DFC5B2\",\n      \"Vehicles\": \"#B7BCD6\",\n      \"Transportation Infrastructure\": \"#ACBCC5\",\n      \"Residential Buildings\": \"#5088A1\",\n      \"Manufacturing, Production, and Construction\": \"#998C84\",\n      \"Oil Infrastructure\": \"#D2D9B6\",\n      \"Media and Telecom Facilities\": \"#9194A8\",\n      \"Terrain\": \"#AEAC8D\",\n      \"Water Infrastructure\": \"#8EBADB\",\n      \"Electrical Infrastructure\": \"#78A898\",\n      \"Financial and Banking Facilities\": \"#98D5D3\"\n    };\n\n    const xScale = scalePoint()\n      .domain(quarters)\n      .range([0, width]);\n\n    const yMax = max(data, (d) => {\n      return max(d.categories, (c) => c.count);\n    });\n\n    const yScale = scaleLinear()\n      .domain([0, yMax])\n      .range([height, 0]);\n\n    g.append('g')\n      .call(axisLeft(yScale));\n\n    g.append('g')\n      .attr('transform', `translate(0,${height})`)\n      .call(axisBottom(xScale))\n      .selectAll('text')\n      .style('text-anchor', 'middle')\n      .attr('dy', null)\n      .text((d) => {\n        const [q, y] = d.split(\" \");\n        return `${q}\\n${y}`;\n      });\n\n    categories.forEach((category, idx) => {\n      const lineData = data.map((d) => {\n        const entry = d.categories.find((c) => c.name === category);\n        return {\n          quarter: d.quarter,\n          count: entry ? entry.count : 0\n        };\n      });\n\n      const id = `grad-${idx}`;\n      const color = colorMap[category] || '#ccc';\n\n      const gradient = defs.append('linearGradient')\n        .attr('id', id)\n        .attr('x1', '0%')\n        .attr('y1', '0%')\n        .attr('x2', '0%')\n        .attr('y2', '100%');\n\n      gradient.append('stop')\n        .attr('offset', '0%')\n        .attr('stop-color', color)\n        .attr('stop-opacity', 0.6);\n\n      gradient.append('stop')\n        .attr('offset', '100%')\n        .attr('stop-color', '#ffffff')\n        .attr('stop-opacity', 0.8);\n\n      const areaPath = area()\n        .x((d) => xScale(d.quarter))\n        .y0(height)\n        .y1((d) => yScale(d.count));\n\n      g.append('path')\n        .datum(lineData)\n        .attr('fill', `url(#${id})`)\n        .attr('fill-opacity', .7)\n        .attr('stroke', 'none')\n        .attr('d', areaPath);\n\n      const linePath = line()\n        .x((d) => xScale(d.quarter))\n        .y((d) => yScale(d.count));\n\n      g.append('path')\n        .datum(lineData)\n        .attr('fill', 'none')\n        .attr('stroke', color)\n        .attr('stroke-width', 1.5)\n        .attr('d', linePath);\n    });\n  }, []);\n\n  const categories = [...sortedCategories];\n\n  const colorMap = {\n    \"Military Personnel, Equipment & Facilities\": \"#DFC5B2\",\n    \"Vehicles\": \"#B7BCD6\",\n    \"Transportation Infrastructure\": \"#ACBCC5\",\n    \"Residential Buildings\": \"#5088A1\",\n    \"Manufacturing, Production, and Construction\": \"#998C84\",\n    \"Oil Infrastructure\": \"#D2D9B6\",\n    \"Media and Telecom Facilities\": \"#9194A8\",\n    \"Terrain\": \"#AEAC8D\",\n    \"Water Infrastructure\": \"#8EBADB\",\n    \"Electrical Infrastructure\": \"#78A898\",\n    \"Financial and Banking Facilities\": \"#98D5D3\"\n  };\n\n  return (\n    <ChartContainer>\n      <Legend>\n        {categories.map((name) => (\n          <LegendItem key={name} color={colorMap[name] || '#ccc'}>\n            {name}\n          </LegendItem>\n        ))}\n      </Legend>\n      <svg ref={svgRef}></svg>\n    </ChartContainer>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}